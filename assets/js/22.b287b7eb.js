(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{257:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[s._m(0),s._v(" "),a("p",[s._v("저희 팀에서 사용하는 컨벤션 리스트입니다.")]),s._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("컨벤션이란, 같이 작업을 하면서 통일성을 지키기 위해서 정한 규약입니다. 요즘은 "),a("a",{attrs:{href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Lint"),a("OutboundLink")],1),s._v('등을 사용하여 코딩 컨벤션이 강제로 지켜지기 때문에, 면접때 "코딩 스타일은 잘 맞출수 있나요?" 이런 질문은 이제 옛날 얘기입니다.')]),s._v(" "),a("p",[s._v("하지만 코딩 스타일을 제외하고도 repo 이름, 커밋 로그 규칙, 서비스/프로젝트 이름, 파일/폴더 구조등 다양한 컨벤션이 아직 존재하고 lint 로써 해결 못하는 규칙들도 존재하기에 개발을 시작하기전에 제일 먼저 컨벤션을 작성하는 것이 기본입니다.")])]),s._v(" "),a("p",[s._v("대부분의 컨벤션은 엄마가 좋아? 아빠가 좋아? 같은 규칙입니다. 딱히 어떤 것이 정답이라는 것은 없지만 한쪽 방향으로 정하여 통일성을 부여하는 것은 중요합니다.")]),s._v(" "),s._m(1),s._v(" "),s._m(2),s._v(" "),s._m(3),s._v(" "),s._m(4),s._v(" "),a("p",[s._v("GitHub 회원 가입시 다음과 같이 가입합니다. 회원명은 글로벌 유니크로써 겹치면 안되기 때문에 회사명을 뒤에 붙이고 앞에는 이메일을 사용합니다. 이미 가입한 사람도 변경이 가능합니다.(단, 개인 repo 주소가 변경되니 유의 바랍니다.)")]),s._v(" "),s._m(5),s._m(6),s._v(" "),s._m(7),s._v(" "),a("p",[s._v("GitHub 의 Repo 그룹 단위가 Organization 입니다. Team은 Organization 내에서 권한 설정을 위해서 사용합니다. 회사명을 Prefix 로하고 뒤에 팀명을 사용합니다. GitHub Repo 전체 검색시 전체 회사 프로젝트가 알파벳순으로 정렬되어 찾기 편합니다.")]),s._v(" "),a("p",[s._v("오픈 소스의 경우 오픈 소스명을 그대로 사용합니다.")]),s._v(" "),s._m(8),s._m(9)])},[function(){var s=this.$createElement,t=this._self._c||s;return t("h1",{attrs:{id:"conventions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conventions","aria-hidden":"true"}},[this._v("#")]),this._v(" Conventions")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"일반-사항"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#일반-사항","aria-hidden":"true"}},[this._v("#")]),this._v(" 일반 사항")])},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ul",[a("li",[a("p",[s._v("소문자, 숫자, -(Dash) 를 주로 사용합니다.")]),s._v(" "),a("ul",[a("li",[s._v("소문자, 대문자를 섞어 쓰다보면 실수를 할 수 있습니다. 소문자만 사용하게 되면 불필요한 고민을 덜게 됩니다.")]),s._v(" "),a("li",[s._v("요즘은 _(Underscore) 보다는 -(Dash)를 많이 사용합니다. github, npm, docker등 대부분이 _(Underscore) 대신 -(Dash)를 사용합니다. 또한 url도 -(Dash)를 많이 사용하는 추세입니다.")]),s._v(" "),a("li",[s._v("RDB의 경우 _(Underscore)를 사용합니다. 많은 사람들이 아직도 쿼리에는 대문자, 테이블 및 필드명에는 소문자를 주로 사용하기 때문입니다.")]),s._v(" "),a("li",[s._v("ORM을 사용하는 경우에는 대소문자를 사용합니다. 보통 클래스명은 대소문자를 섞어서 쓰는데 객체 클래스와 데이터가 1:1 로 맵핑이 되기때문에 굳이 소문자와 _(Underscore)로 바꾸는 것이 더 번거롭고 직관성이 떨어집니다.")]),s._v(" "),a("li",[s._v("대부분의 경우, 이 룰을 따르며 예외의 경우 각 컨벤션에 명시되어 있습니다.")]),s._v(" "),a("li",[s._v("굳이 이유에 대해서 더 따진다면 그냥 매번 Shift 키 한번 덜 눌러도 된다고 얘기하겠습니다.")])])]),s._v(" "),a("li",[a("p",[s._v("Prefix or Suffix")]),s._v(" "),a("ul",[a("li",[s._v("서비스, 프로젝트, 파일명등을 지을때 공통된 키워드를 앞으로 놓을지 뒤로 놓을지에 대한 컨벤션입니다.")]),s._v(" "),a("li",[s._v("알파벳으로 소팅해서 볼때 구분하기 쉬운 방법을 선택합니다."),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Prefix 방식")]),s._v("\ncookapps-project-a\ncookapps-project-b\ncookapps-project-c\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Suffix 방식")]),s._v("\na-project-cookapps\nb-project-cookapps\nc-project-cookapps\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Prefix가 좋은 경우: 내 서비스와 다른 서비스가 섞여서 한번에 보이는 경우")]),s._v("\ncookapps-project-a\ncookapps-project-b\ncookapps-project-c\ncookpi-project-a\ncookpi-project-b\ncookpi-project-c\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Suffix 좋은 경우: 내 서비스만 보이는 경우")]),s._v("\na-project-cookapps\na-cookpi-project "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 내 화면에 보이지 않음")]),s._v("\nb-project-cookapps\nb-cookpi-project "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 내 화면에 보이지 않음")]),s._v("\nc-project-cookapps\nc-cookpi-project "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 내 화면에 보이지 않음")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("ul",[a("li",[s._v("예시) GitHub 같이 다양한 repo 이름이 섞여 있는 경우 회사명을 prefix 하면 우리 회사 repo 만 필터링해서 보기 편합니다.")]),s._v(" "),a("li",[s._v("예시) S3, Firebase 같이 이름은 Global Unique 해야 하나 내 콘솔에서는 내 서비스만 보이는 경우는 Suffix 방식을 사용합니다.")]),s._v(" "),a("li",[s._v("예시) dev, prod 등 스테이지 방식은 suffix 를 사용합니다.")])])]),s._v(" "),a("li",[s._v("각 서비스 및 네이밍에 대하여 Prefix, Suffix를 명시할 예정입니다.")])])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"github"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#github","aria-hidden":"true"}},[this._v("#")]),this._v(" GitHub")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"account"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#account","aria-hidden":"true"}},[this._v("#")]),this._v(" Account")])},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("COMPANY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 예시")]),s._v("\njinkim-cookapps\nmhoh-cookapps\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("ul",[t("li",[this._v("NAME: 회사 이메일의 앞자리를 사용합니다.\n"),t("ul",[t("li",[this._v("jinkim@cookapps.com  > jinkim-cookapps")]),this._v(" "),t("li",[this._v("mhoh@cookapps.com  > mhoh-cookapps")])])]),this._v(" "),t("li",[this._v(".(dot)이 허용이 되지 않기 때문에 .(dot) 이 있는 경우 생략합니다.")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"organization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#organization","aria-hidden":"true"}},[this._v("#")]),this._v(" Organization")])},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("COMPANY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("TEAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 예시")]),s._v("\ncookapps-sandbox\ncookapps-playgrounds\ncookapps-ff\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),t("p",[this._v("작성중")])])}],!1,null,null,null);t.default=e.exports}}]);