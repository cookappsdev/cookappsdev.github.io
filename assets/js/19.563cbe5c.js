(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{236:function(t,e,_){"use strict";_.r(e);var r=_(0),v=Object(r.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"rest-api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rest-api","aria-hidden":"true"}},[t._v("#")]),t._v(" REST API "),_("Badge",{attrs:{text:"jwkim2"}})],1),t._v(" "),_("div",{staticClass:"small"},[t._v("뒤에 이어질 [Tutorial: serverless-express-aurora](/frameworks/serverless/tutorial-serverless-express-aurora.html)를 위하여 REST API 에 대하여 잠시 설명합니다. 본 포스팅은 차후 API 카테고리로 이전 예정입니다.")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),_("p",[t._v('REST는 거의 20년이나 된 것이기 때문에 자료도 너무 많은데도 불구하고 아직 개념을 제대로 이해하지 못한 분들도 있고, "읽어봐도 뭔 소리인지 잘모르겠다"라고 하는 사람들도 있습니다. 어렴풋이는 대충 알고 있는데 명확하게 설명을 잘 못하는 사람들도 있습니다. 제가 보았을때 공학을 너무 공학적으로 설명한(?) 글들이 많아 내용을 보고도 이해가 잘 되지 않았던것 같습니다.')]),t._v(" "),_("p",[t._v("사실 좋은 글들이 많은데 굳이 같은 내용을 제가 다시 설명하는 것은 큰 의미가 없는 것 같아서 조금 다른 방식으로 접근 해보려고 합니다.(이 블로그는 원래 평범하지 않습니다.)")]),t._v(" "),t._m(4),t._v(" "),_("p",[t._v("웹 개발자로 일하던 쿡이라는 사람이 있습니다. 쿡은 여러 Third Party 서비스를 한번에 연동하는 서비스를 개발하고 있습니다.")]),t._v(" "),t._m(5),t._v(" "),_("p",[t._v("WTF, 세 업체 친구 리스트를 연동해야 하는데 각각 이름이 다 다릅니다. 이번에는 친구 추가 API 입니다.")]),t._v(" "),t._m(6),t._v(" "),_("p",[t._v("이런 API 각 서비스별로 120개씩 존재합니다. 쿡은 이베이를 통해 심장약과 칼을 주문합니다.")]),t._v(" "),_("p",[t._v("이번에는 연동을 위해서 어떤 프로토콜을 사용하는지 물어봤습니다.")]),t._v(" "),t._m(7),t._v(" "),_("p",[t._v("쿡은 이베이를 통해 바로 바주카포를 주문합니다. 6.25때 난리는 난리도 아닙니다.")]),t._v(" "),t._m(8),t._v(" "),_("p",[t._v("각각의 서비스들마다 API 를 정의하는 방식과 연동 방법이 다르다보니 일일히 각 서비스에 맞춰서 개발을 하느라 시간이 오래 걸리고 생산성이 나지 않습니다. 결국 하고 싶은 것은 데이터를 읽기,추가,수정,삭제 4가지 뿐인데(-그것이 친구 데이터이든 아이템 데이터이든-) 부가적으로 할것이 너무 많습니다.")]),t._v(" "),_("p",[t._v("잘 생각해보니, DB에서 하는 일이라고는 트랜젝션이다 프로시져다 머다해도 결론적으로는 읽기(SELECT),추가(INSERT),수정(UPDATE),삭제(DELETE) 뿐이 없습니다.")]),t._v(" "),_("p",[t._v("잘 생각해보니, HTTP 에서는 GET,POST,PUT,DELETE 의 4가지 Methods 를 지원합니다.(사실 몇개 더 있습니다.)")]),t._v(" "),_("p",[t._v("바로 이거다. 하나의 자원에 대해서 HTTP를 통해서 GET(SELECT), POST(INSERT), PUT(UPDATE), DELETE(DELETE) 를 하자. 그리고 편의를 위해서 무조건 JSON 형태로 주고 받자.")]),t._v(" "),t._m(9),t._v(" "),_("p",[t._v("이것이 바로 REST API 입니다. 물론 쿡 혼자서 각 서비스들에게 API 를 변경하라고 할수는 없지만, 현실에서 각 서비스 제공자든 서비스 소비자든 통합을 원했고 이런 방식으로 표준스럽게 채택하여 사용하기 시작합니다.('표준스럽게라'라고 표현한것은 표준 위원회에서 공식적으로 채택한 내용은 아니나 사람들이 많이 사용하여 표준처럼 사용이 되어왔습니다.)")]),t._v(" "),_("p",[t._v("REST API 란 각기 다른 서비스나 서버-클라이언트 간에 규약입니다. 이름도 방식도 중구난방으로 하면 서로 힘드니 우리 이런 방식으로 통일해서 사용하자 해서 고착화 된 것이 REST API 입니다.")]),t._v(" "),_("p",[t._v("(쿡은 구매한 무기를 모두 환불합니다.)")]),t._v(" "),t._m(10),t._v(" "),_("p",[t._v("위에서 언급한바와 같이 REST API 는 정확한 표준은 아닙니다. 그냥 이런식으로 하자라고 고착화 된 것이다보니 완전히 통일이 되지 않았습니다. 대부분 많이 쓰는 방식이 존재하나 그것이 REST 다 라고 정의하기는 힘듭니다.(REST 스럽게 구현했다고 해서 RESTFul API 라는 표현도 합니다.)")]),t._v(" "),_("p",[t._v("이에 필자가 많은 사람들이 사용하는 방식으로 간단한 REST API를 정의하려고 합니다만 다른 사람도 모두 같은 방식을 쓰는 것은 아니라는 것만 염두해 두시면 됩니다.(실제로 개발에는 REST 보다는 차세대 API 방식인 GraphQL을 사용합니다.)")]),t._v(" "),t._m(11),t._v(" "),_("p",[t._v("REST API 의 URL의 끝에 ID가 붙는지 안붙는지에 따라서 크게 두가지 형태로 나뉩니다.")]),t._v(" "),t._m(12),t._v(" "),_("p",[t._v("중첩된 구조일 경우 상위 URL 에 종속적입니다. 다음은 예시입니다.")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),_("div",{staticClass:"small"},[t._v("예외: 자원이 대상이 아닌 인증등의 행위에 대해서는 동사를 허락하고 POST 방식을 사용(Web Form 과 동일)")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"rest-api란"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api란","aria-hidden":"true"}},[this._v("#")]),this._v(" REST API란?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("REST(REpresentational State Transfer) API:")]),this._v(" 대의적(대표적) 상태 전달 API"),e("br"),this._v("\n무슨 말인지 모르겠습니다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고 자원에 대한 행위를 HTTP Method를 통해 정의한다.")]),e("br"),this._v("\n마음와 와닫지 않습니다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("2000년도 Roy Fielding의 박사학위 논문에서 최초로 소개 되었고, Roy Fielding은 HTTP의 주요 저자중 한 사람으로 웹의 아키텍처의 우수성에 비해 제대로 사용되어지지 못하는 모습에 안타까워하면 웹의 장점을 최대한 활용할 수 있는 아키텍처로써 REST를 발표했다고 합니다.")]),e("br"),this._v("\n어쩌라고? (로이 박사님 죄송 ㅠㅠ)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"rest-api-의-시작-부제-전쟁의-서막"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api-의-시작-부제-전쟁의-서막","aria-hidden":"true"}},[this._v("#")]),this._v(" REST API 의 시작(부제: 전쟁의 서막)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A라는 서비스의 친구 관련 API 를 물어보니, GetFriendInfo 라고 합니다."),e("br"),this._v("\nB라는 서비스에 물어보니 GetFriends 라고 합니다."),e("br"),this._v("\nC라는 서비스에 물어보니 GetMyFriendsInfo 라고 합니다."),e("br")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A 서비스: AddFriendInfo"),e("br"),this._v("\nB 서비스: AddFriends"),e("br"),this._v("\nC 서비스: AddMySuperUltraLovelyFriendInfo"),e("br")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A 서비스: HTTP/JSON"),e("br"),this._v("\nB 서비스: SOAP/XML"),e("br"),this._v("\nC 서비스: TCP/PACKET"),e("br")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"rest-api로-통합"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api로-통합","aria-hidden":"true"}},[this._v("#")]),this._v(" REST API로 통합")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("table",[_("thead",[_("tr",[_("th",[t._v("URL")]),t._v(" "),_("th",[t._v("GET")]),t._v(" "),_("th",[t._v("POST")]),t._v(" "),_("th",[t._v("PUT")]),t._v(" "),_("th",[t._v("DELETE")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("service/friends")]),t._v(" "),_("td",[t._v("친구 정보 얻기")]),t._v(" "),_("td",[t._v("친구 추가")]),t._v(" "),_("td",[t._v("친구 정보 수정")]),t._v(" "),_("td",[t._v("친구 삭제")])]),t._v(" "),_("tr",[_("td",[t._v("service/items")]),t._v(" "),_("td",[t._v("아이템 정보 얻기")]),t._v(" "),_("td",[t._v("아이템 추가")]),t._v(" "),_("td",[t._v("아이템 정보 수정")]),t._v(" "),_("td",[t._v("아이템 삭제")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"rest-api-설계"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api-설계","aria-hidden":"true"}},[this._v("#")]),this._v(" REST API 설계")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"rest-api-필요-개념"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api-필요-개념","aria-hidden":"true"}},[this._v("#")]),this._v(" REST API 필요 개념")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("컬렉션(Collection): 집합(Array) > 유저들, 아이템들, 이벤트들")]),this._v(" "),e("li",[this._v("도큐먼트(Document): 객체 하나(Object) > 유저, 아이템, 이벤트")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("table",[_("thead",[_("tr",[_("th",[t._v("URL")]),t._v(" "),_("th",[t._v("구분")]),t._v(" "),_("th",[t._v("설명")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("/users")]),t._v(" "),_("td",[t._v("컬렉션")]),t._v(" "),_("td",[t._v("유저 리스트")])]),t._v(" "),_("tr",[_("td",[t._v("/users/111")]),t._v(" "),_("td",[t._v("도큐먼트")]),t._v(" "),_("td",[t._v("유저 번호가 111 인 유저 정보")])]),t._v(" "),_("tr",[_("td",[t._v("/users/111/items")]),t._v(" "),_("td",[t._v("컬렉션")]),t._v(" "),_("td",[t._v("유저 번호가 111 인 유저의 모든 아이템 리스트")])]),t._v(" "),_("tr",[_("td",[t._v("/users/111/items/123")]),t._v(" "),_("td",[t._v("도큐먼트")]),t._v(" "),_("td",[t._v("유저 번호가 111 인 유저의 아이템중 아이템 번호가 123 인 아이템 하나의 정보")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"rest-api-설계-규칙"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api-설계-규칙","aria-hidden":"true"}},[this._v("#")]),this._v(" REST API 설계 규칙")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[t._v("소문자, 숫자, -(대시)만 사용: _(언더바 사용안함)")]),t._v(" "),_("li",[t._v("동사보다는 명사를 사용")]),t._v(" "),_("li",[t._v("복수 명사만 사용, 단수 사용 안함")]),t._v(" "),_("li",[t._v("슬래시(/)는 계층 관계")]),t._v(" "),_("li",[t._v("Stateless(무상태성): API 자체는 상태를 가지지 않음. Cookie, Session 등을 사용하지 않고 단순이 들어오는 요청값에 의해서만 처리하여 구현이 단순해 짐. 인증은 JWT를 사용하고 상태가 필요한 정보는 DB에 질의 함")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"http-method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-method","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP Method")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("table",[_("thead",[_("tr",[_("th",[t._v("GET")]),t._v(" "),_("th",[t._v("POST")]),t._v(" "),_("th",[t._v("PUT")]),t._v(" "),_("th",[t._v("DELETE")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("SELECT")]),t._v(" "),_("td",[t._v("INSERT")]),t._v(" "),_("td",[t._v("UPDATE")]),t._v(" "),_("td",[t._v("DELETE")])]),t._v(" "),_("tr",[_("td",[t._v("조회")]),t._v(" "),_("td",[t._v("추가")]),t._v(" "),_("td",[t._v("수정")]),t._v(" "),_("td",[t._v("삭제")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"http-응답-코드"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-응답-코드","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP 응답 코드")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[t._v("200: 성공")]),t._v(" "),_("li",[t._v("400: 잘못된 요청(파라미터를 잘못 보낸 경우)")]),t._v(" "),_("li",[t._v("403: 권한 없음(유저가 어드민 API를 호출한 경우)")]),t._v(" "),_("li",[t._v("404: 리소스 없음(존재하지 않는 리소스를 요청한 경우)")]),t._v(" "),_("li",[t._v("500: 서버 오류(서버 내부 예외 상황)")])])}],!1,null,null,null);e.default=v.exports}}]);